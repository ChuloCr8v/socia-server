// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "rhel-openssl-1.0.x"]
  // output        = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VENDOR
  RIDER
  USER
}

enum MenuAvailability {
  AVAILABLE
  UNAVAILABLE
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum AuthProvider {
  GOOGLE
  APPLE
  PASSWORD
}

enum BusinessType {
  PHARMACY
  RESTAURANT
  GROCERY
}

model BankInformation {
  id            String @id @default(uuid()) @db.Uuid
  bankName      String
  accountName   String
  accountNumber String
  vendor        Vendor @relation(fields: [vendorId], references: [id])
  vendorId      String @db.Uuid()

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Auth {
  passHash String?
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @id @db.Uuid

  provider   AuthProvider?
  providerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([provider, providerId])
}

enum OtpTypes {
  EMAIL_VERIFICATION
  RESET_PASSWORD
}

model Otp {
  id        String   @id @default(uuid()) @db.Uuid
  otp       String
  expiresAt DateTime
  type      OtpTypes
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique
  name  String

  auth Auth?
  otps Otp[]

  profileImage Image?

  vendor     Vendor?
  isVerified Boolean @default(false)
  role       Role    @default(USER)

  status UserStatus? @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  publicId String @unique
  url      String

  menu   Menu?   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId String? @db.Uuid

  logoVendor   Vendor? @relation("VendorLogo", fields: [logoVendorId], references: [id])
  logoVendorId String? @unique @db.Uuid

  vendorProfileImage Vendor? @relation("VendorProfileImage", fields: [profileImageId], references: [id])
  profileImageId     String? @unique @db.Uuid

  headerVendor   Vendor? @relation("VendorHeaderImage", fields: [headerVendorId], references: [id])
  headerVendorId String? @unique @db.Uuid

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.Uuid

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Orders {
  id        String @id @default(uuid()) @db.Uuid
  pending   Int
  active    Int
  completed Int

  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String @db.Uuid
}

model Vendor {
  id                  String            @id @default(uuid()) @db.Uuid
  vendorId            String            @unique
  logo                Image?            @relation("VendorLogo")
  profileImage        Image?            @relation("VendorProfileImage")
  headerImage         Image?            @relation("VendorHeaderImage")
  businessName        String
  email               String?           @unique
  businessDescription String?
  businessLocation    String?
  businessCity        String?
  businessState       String?
  address             String?
  phone               String            @unique
  cac                 String?
  banks               BankInformation[]
  openingTime         String?
  closingTime         String?
  user                User?             @relation(fields: [userId], references: [id])
  userId              String            @unique @db.Uuid
  status              UserStatus?       @default(ACTIVE)
  businessCategory    String?
  rating              String?
  deliveryTime        DateTime?
  deliveryFee         Int               @default(0)

  orders    Orders[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Menu      Menu[]
}

model MenuItemSizeVariations {
  id           String            @id @unique @default(uuid()) @db.Uuid
  name         String
  price        String
  availability MenuAvailability? @default(AVAILABLE)
  qty          Int
  description  String?
  isDefault    Boolean           @default(false)
  menu         Menu              @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId       String            @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model addOn {
  id           String            @id @unique @default(uuid()) @db.Uuid
  name         String
  price        String
  availability MenuAvailability? @default(AVAILABLE)
  qty          Int
  description  String?
  image        String?

  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId String @db.Uuid

  isRequired Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String?
  image       Image?
  isActive    Boolean @default(true)

  menus  Menu[] // Relation to many menus
  menuId String? @db.Uuid

  businessType BusinessType? @default(RESTAURANT)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Menu {
  id String @id @unique @default(uuid()) @db.Uuid

  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String @db.Uuid

  name            String
  description     String
  price           Decimal                  @db.Decimal(10, 2)
  availability    MenuAvailability?        @default(AVAILABLE)
  preparationTime Int
  stockQuantity   String?
  variants        MenuItemSizeVariations[]
  addons          addOn[]
  images          Image[]
  categories      Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
